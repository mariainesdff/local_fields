import filter
import seminormed_rings
import analysis.special_functions.pow

noncomputable theory

open_locale topological_space

variables {Œ± : Type*} [comm_ring Œ±] (c : Œ±) (f : Œ± ‚Üí nnreal) (hf1 : is_norm_le_one_class f)
  (hc : 0 ‚â† f c) (hsn : is_seminorm f) (hpm : is_pow_mult f)

def c_seminorm_seq (x : Œ±) : ‚Ñï ‚Üí nnreal :=
Œª n, (f (x * c^n))/((f c)^n)

lemma c_seminorm_is_bounded (x : Œ±) :
  bdd_below (set.range (c_seminorm_seq c f x)) := 
begin
  use 0,
  rw mem_lower_bounds,
  intros r hr,
  obtain ‚ü®n, hn‚ü© := hr,
  rw ‚Üê hn,
  exact zero_le',
end

variable {f}

lemma c_seminorm_seq_zero (hf : f 0 = 0) : 
  c_seminorm_seq c f 0 = 0 := 
begin
  simp only [c_seminorm_seq],
  ext n,
  rw [zero_mul, hf, zero_div],
  refl,
end

/- lemma c_seminorm_seq_nonneg (x : Œ±) (n : ‚Ñï) : 0 ‚â§ c_seminorm_seq c f x n := zero_le'
 -/

variable {c}

include hc hpm

lemma c_seminorm_seq_one (n : ‚Ñï) (hn : 1 ‚â§ n) : 
  c_seminorm_seq c f 1 n = 1 := 
begin
  simp only [c_seminorm_seq],
  rw [one_mul, hpm _ hn, div_self (pow_ne_zero n (ne.symm hc))],
end

include hf1 include hsn

lemma c_seminorm_seq_antitone (x : Œ±) :
  antitone (c_seminorm_seq c f x) := 
begin
  intros m n hmn,
  simp only [c_seminorm_seq],
  nth_rewrite 0 ‚Üê nat.add_sub_of_le hmn,
  rw [pow_add, ‚Üê mul_assoc],
  apply le_trans ((div_le_div_right‚ÇÄ (pow_ne_zero _ (ne.symm hc))).mpr (hsn.mul _ _)),
  by_cases heq : m = n,
  { have : n - m = 0,
    { rw heq, exact nat.sub_self n, },
    rw [this, heq, div_le_div_right‚ÇÄ (pow_ne_zero _ (ne.symm hc)), pow_zero],
    conv_rhs{rw ‚Üê mul_one (f (x * c ^ n))},
    exact mul_le_mul' (le_refl _) hf1 },
  { have h1 : 1 ‚â§ n - m,
    { rw [nat.one_le_iff_ne_zero, ne.def, nat.sub_eq_zero_iff_le, not_le],
    exact lt_of_le_of_ne hmn heq,},
    rw [hpm c h1, mul_div_assoc, div_eq_mul_inv, pow_sub‚ÇÄ _ (ne.symm hc) hmn, mul_assoc,
      mul_comm (f c ^ m)‚Åª¬π, ‚Üê mul_assoc (f c ^ n), mul_inv_cancel (pow_ne_zero n (ne.symm hc)),
      one_mul, div_eq_mul_inv], }
end

def c_seminorm_seq_lim (x : Œ±) : nnreal :=
classical.some (nnreal.tendsto_of_is_bounded_antitone (c_seminorm_is_bounded c f x) 
  (c_seminorm_seq_antitone hf1 hc hsn hpm x))

lemma c_seminorm_seq_lim_is_limit (x : Œ±) : filter.tendsto ((c_seminorm_seq c f x)) filter.at_top
  (ùìù (c_seminorm_seq_lim hf1 hc hsn hpm x)) :=
classical.some_spec (nnreal.tendsto_of_is_bounded_antitone (c_seminorm_is_bounded c f x) 
  (c_seminorm_seq_antitone hf1 hc hsn hpm x))

def c_seminorm : Œ± ‚Üí nnreal := Œª x, c_seminorm_seq_lim hf1 hc hsn hpm x

lemma c_seminorm_zero : c_seminorm hf1 hc hsn hpm 0 = 0 :=
tendsto_nhds_unique (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm 0) 
  (by simpa [c_seminorm_seq_zero c hsn.zero] using tendsto_const_nhds)


lemma c_seminorm_is_norm_one_class : is_norm_one_class (c_seminorm hf1 hc hsn hpm) :=
begin
  apply tendsto_nhds_unique_of_eventually_eq (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm 1)
    tendsto_const_nhds,
  simp only [filter.eventually_eq, filter.eventually_at_top, ge_iff_le],
  exact ‚ü®1,  c_seminorm_seq_one hc hpm‚ü©,
end

lemma c_seminorm_mul (x y : Œ±) :
  c_seminorm hf1 hc hsn hpm (x * y) ‚â§ c_seminorm hf1 hc hsn hpm x * c_seminorm hf1 hc hsn hpm y :=
begin
  have hlim : filter.tendsto (Œª n, c_seminorm_seq c f (x * y) (2 *n)) filter.at_top
    (ùìù (c_seminorm_seq_lim hf1 hc hsn hpm (x * y) )),
  { refine filter.tendsto.comp (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm (x * y)) _,
    apply filter.tendsto_at_top_at_top_of_monotone,
    { intros n m hnm, simp only [mul_le_mul_left, nat.succ_pos', hnm], },
    { rintro n, use n, linarith, }},
  apply le_of_tendsto_of_tendsto' hlim (filter.tendsto.mul
    (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm x) (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm y)),
  intro n,
  simp only [c_seminorm_seq],
  rw [div_mul_div_comm‚ÇÄ, ‚Üê pow_add, two_mul, div_le_div_right‚ÇÄ (pow_ne_zero _ (ne.symm hc)),
    pow_add, ‚Üê mul_assoc, mul_comm (x * y), ‚Üê mul_assoc, mul_assoc, mul_comm (c^n)],
  exact hsn.mul (x * c ^ n) (y * c ^ n), 
end

/- lemma c_seminorm_nonneg (hc : 0 ‚â† f c) (hsn : is_seminorm f) (hpm : is_pow_mult f) (x : Œ±):
  0 ‚â§ c_seminorm hc hsn hpm x :=
begin
  simp only [c_seminorm],
  apply ge_of_tendsto (c_seminorm_seq_lim_is_limit hc hsn hpm x),
  simp only [filter.eventually_at_top, ge_iff_le],
  use 0,
  rintro n -,
  exact c_seminorm_seq_nonneg c hsn.nonneg x n,
end -/

lemma c_seminorm_is_seminorm :
  is_seminorm (c_seminorm hf1 hc hsn hpm)  :=
{ zero   := c_seminorm_zero hf1 hc hsn hpm,
  mul    := c_seminorm_mul hf1 hc hsn hpm/- ,
  one    := le_of_eq (c_seminorm_is_norm_one_class hc hsn hpm) -/  }

lemma c_seminorm_is_seminorm' :
  is_norm_le_one_class (c_seminorm hf1 hc hsn hpm) :=
le_of_eq (c_seminorm_is_norm_one_class hf1 hc hsn hpm) 

lemma c_seminorm_is_nonarchimedean (hna : is_nonarchimedean f) :
  is_nonarchimedean (c_seminorm hf1 hc hsn hpm)  :=
begin
  intros x y,
  apply le_of_tendsto_of_tendsto' (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm (x + y))
    (filter.tendsto.max (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm x)
    (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm y)),
  intro n,
  have hmax : f ((x + y) * c ^ n) ‚â§ max (f (x * c ^ n)) (f (y * c ^ n)),
  { rw add_mul, exact hna _ _ },
  rw le_max_iff at hmax ‚ä¢,
  cases hmax; [left, right];
  exact (div_le_div_right‚ÇÄ (pow_ne_zero _ (ne.symm hc))).mpr hmax,
end

lemma c_seminorm_is_pow_mult : is_pow_mult (c_seminorm hf1 hc hsn hpm) :=
begin
  intros x m hm,
  simp only [c_seminorm],
  have hpow := filter.tendsto.pow (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm x) m,
  have hlim : filter.tendsto (Œª n, c_seminorm_seq c f (x^m) (m*n)) filter.at_top
    (ùìù (c_seminorm_seq_lim hf1 hc hsn hpm (x^m) )),
  { refine filter.tendsto.comp (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm (x^m)) _,
    apply filter.tendsto_at_top_at_top_of_monotone,
    { intros n k hnk, exact mul_le_mul_left' hnk m, },
    { rintro n, use n, exact le_mul_of_one_le_left' hm, }},
  apply tendsto_nhds_unique hlim,
  convert filter.tendsto.pow (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm x) m,
  ext n,
  simp only [c_seminorm_seq],
  rw [div_pow, ‚Üê hpm _ hm, ‚Üê pow_mul, mul_pow, ‚Üê pow_mul, mul_comm m n],
end

lemma c_seminorm_le_seminorm (x : Œ±) : c_seminorm hf1 hc hsn hpm x ‚â§ f x :=
begin
  apply le_of_tendsto (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm x),
  simp only [filter.eventually_at_top, ge_iff_le],
  use 1,
  rintros n hn,
  apply le_trans ((div_le_div_right‚ÇÄ (pow_ne_zero _ (ne.symm hc))).mpr (hsn.mul _ _)),
  rw [hpm c hn, mul_div_assoc, div_self (pow_ne_zero n hc.symm), mul_one],
end

lemma c_seminorm_apply_of_is_mult {x : Œ±} (hx : ‚àÄ y : Œ±, f (x * y) = f x * f y) :
  c_seminorm hf1 hc hsn hpm x = f x :=
begin
  have hlim : filter.tendsto (c_seminorm_seq c f x) filter.at_top (ùìù (f x)),
  { have hseq : c_seminorm_seq c f x = Œª n, f x,
    { ext n,
      by_cases hn : n = 0,
      { simp only [c_seminorm_seq], 
        rw [hn, pow_zero, pow_zero, mul_one, div_one], },
      { simp only [c_seminorm_seq],
        rw [hx (c ^n), hpm _ (nat.one_le_iff_ne_zero.mpr hn), mul_div_assoc,
          div_self (pow_ne_zero n hc.symm), mul_one], }},
    simpa [hseq] using tendsto_const_nhds, },
  exact tendsto_nhds_unique (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm x) hlim,
end

lemma c_seminorm_is_mult_of_is_mult {x : Œ±} (hx : ‚àÄ y : Œ±, f (x * y) = f x * f y) (y : Œ±) :
  c_seminorm hf1 hc hsn hpm (x * y) = c_seminorm hf1 hc hsn hpm x * c_seminorm hf1 hc hsn hpm y :=
begin
  have hlim : filter.tendsto (c_seminorm_seq c f (x * y)) filter.at_top
    (ùìù (c_seminorm hf1 hc hsn hpm x * c_seminorm hf1 hc hsn hpm y)),
  { rw c_seminorm_apply_of_is_mult hf1 hc hsn hpm hx,
    have hseq : c_seminorm_seq c f (x * y) = Œª n, f x * c_seminorm_seq c f y n,
    { ext n,
      simp only [c_seminorm_seq],
      rw [mul_assoc, hx, mul_div_assoc], },
    simpa [hseq] using filter.tendsto.const_mul _ (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm y) },
  exact tendsto_nhds_unique (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm (x * y)) hlim,
end

lemma c_seminorm_apply_c : c_seminorm hf1 hc hsn hpm c = f c :=
begin
  have hlim : filter.tendsto (c_seminorm_seq c f c) filter.at_top (ùìù (f c)),
  { have hseq : c_seminorm_seq c f c = Œª n, f c,
    { ext n,
      simp only [c_seminorm_seq],
      rw [‚Üê pow_succ, hpm _ le_add_self, pow_succ, mul_div_assoc, div_self (pow_ne_zero n hc.symm),
        mul_one], },
    simpa [hseq] using tendsto_const_nhds },
    exact tendsto_nhds_unique (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm c) hlim,
end

lemma c_seminorm_c_is_mult (x : Œ±) :
  c_seminorm hf1 hc hsn hpm (c * x) = c_seminorm hf1 hc hsn hpm c * c_seminorm hf1 hc hsn hpm x :=
begin
  have hlim : filter.tendsto (Œª n, c_seminorm_seq c f x (n + 1)) filter.at_top
    (ùìù (c_seminorm_seq_lim hf1 hc hsn hpm x)),
  { refine filter.tendsto.comp (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm x) _,
    apply filter.tendsto_at_top_at_top_of_monotone,
    { intros n m hnm, exact succ_order.succ_le_succ_iff.mpr hnm },
    { rintro n, use n, linarith, }}, 
  rw c_seminorm_apply_c hf1 hc hsn hpm,
  apply tendsto_nhds_unique (c_seminorm_seq_lim_is_limit hf1 hc hsn hpm (c * x)),
  have hterm: c_seminorm_seq c f (c * x) = (Œª n, f c * (c_seminorm_seq c f x (n + 1))),
  { simp only [c_seminorm_seq],
    ext n,
    rw [mul_comm c, pow_succ, pow_succ, mul_div_comm, div_eq_mul_inv _ (f c * f c ^ n), mul_inv‚ÇÄ,
      ‚Üê mul_assoc (f c), mul_inv_cancel hc.symm, one_mul, mul_assoc, div_eq_mul_inv] },
  simpa [hterm] using filter.tendsto.mul tendsto_const_nhds hlim,
end

omit hf1 hc hsn hpm

def ring_hom.is_bounded {Œ± : Type*} [semi_normed_ring Œ±] {Œ≤ : Type*} [semi_normed_ring Œ≤] 
  (f : Œ± ‚Üí+* Œ≤) : Prop := ‚àÉ C : nnreal, 0 < C ‚àß ‚àÄ x : Œ±, norm (f x) ‚â§ C * norm x

def ring_hom.is_bounded_wrt {Œ± : Type*} [ring Œ±] {Œ≤ : Type*} [ring Œ≤] {nŒ± : Œ± ‚Üí nnreal}
  (hnŒ± : is_seminorm nŒ±) {nŒ≤ : Œ≤ ‚Üí nnreal} (hnŒ≤ : is_seminorm nŒ≤) (f : Œ± ‚Üí+* Œ≤) : Prop :=
‚àÉ C : nnreal, 0 < C ‚àß ‚àÄ x : Œ±, nŒ≤ (f x) ‚â§ C * nŒ± x

example {C : ‚Ñù} (hC : 0 < C) : filter.tendsto (Œª n : ‚Ñï, C ^ (1 / (n : ‚Ñù))) filter.at_top (ùìù 1) :=
begin
  apply filter.tendsto.comp _ (tendsto_const_div_at_top_nhds_0_nat 1),
  rw ‚Üê real.rpow_zero C,
  apply continuous_at.tendsto (real.continuous_at_const_rpow (ne_of_gt hC)),
end 

lemma contraction_of_is_pm_wrt {Œ± : Type*} [ring Œ±] {Œ≤ : Type*} [ring Œ≤] {nŒ± : Œ± ‚Üí nnreal}
  (hnŒ± : is_seminorm nŒ±) {nŒ≤ : Œ≤ ‚Üí nnreal} (hnŒ≤ : is_seminorm nŒ≤) 
  (hŒ≤ : is_pow_mult nŒ≤) {f : Œ± ‚Üí+* Œ≤} (hf : f.is_bounded_wrt hnŒ± hnŒ≤)
  (x : Œ±) : nŒ≤ (f x) ‚â§ nŒ± x :=
begin
  obtain ‚ü®C, hC0, hC‚ü© := hf,
  have hlim : filter.tendsto (Œª n : ‚Ñï, C ^ (1 / (n : ‚Ñù)) * nŒ± x) filter.at_top (ùìù (nŒ± x)),
  { have : (ùìù (nŒ± x)) = (ùìù (1 * (nŒ± x))) := by rw one_mul,
    rw this,
    apply filter.tendsto.mul,
    { apply filter.tendsto.comp _ (tendsto_const_div_at_top_nhds_0_nat 1),
      rw ‚Üê nnreal.rpow_zero C,
      rw ‚Üê nnreal.tendsto_coe,
      apply continuous_at.tendsto (real.continuous_at_const_rpow (ne_of_gt hC0)), },
    exact tendsto_const_nhds, },
  apply ge_of_tendsto hlim,
  simp only [filter.eventually_at_top, ge_iff_le],
  use 1,
  intros n hn,
  have h : (C^(1/n : ‚Ñù))^n  = C,
  { have hn0 : (n : ‚Ñù) ‚â† 0 := nat.cast_ne_zero.mpr (ne_of_gt hn),
      rw [‚Üê nnreal.rpow_nat_cast, ‚Üê nnreal.rpow_mul, one_div, inv_mul_cancel hn0,
        nnreal.rpow_one] },
  apply le_of_pow_le_pow n _ hn,
  { rw [mul_pow, h, ‚Üê hŒ≤ _ hn, ‚Üê ring_hom.map_pow],
    refine le_trans (hC (x^n)) (mul_le_mul (le_refl C)
      (hnŒ±.pow_le  _ (lt_of_lt_of_le zero_lt_one hn)) (zero_le _) (le_of_lt hC0)) },
    { exact zero_le _ },
end

lemma seminormed_ring.to_is_seminorm {Œ± : Type*} [semi_normed_ring Œ±]/-  (h1 : norm (1 : Œ±) ‚â§ 1) -/ : 
  is_seminorm (Œª x : Œ±, (‚ü®‚à•x‚à•, norm_nonneg _‚ü© : nnreal)) :=
{ zero   := by simp only [norm_zero, nonneg.mk_eq_zero],
  mul    := by {simp only [nonneg.mk_mul_mk, subtype.mk_le_mk], exact norm_mul_le }/- ,
  one    := begin 
    have h : (1 : nnreal) = ‚ü®(1 : ‚Ñù), zero_le_one‚ü© := rfl,
    simpa [h, subtype.mk_le_mk] using h1,
  end -/ }

lemma contraction_of_is_pm {Œ± : Type*} [semi_normed_ring Œ±] {Œ≤ : Type*} [semi_normed_ring Œ≤] 
  (hŒ≤ : is_pow_mult (Œª x : Œ≤, (‚ü®‚à•x‚à•, norm_nonneg _‚ü© : nnreal))) {f : Œ± ‚Üí+* Œ≤} (hf : f.is_bounded)
  (x : Œ±) /- (h1Œ± : norm (1 : Œ±) ‚â§ 1) (h1Œ≤ : norm (1 : Œ≤) ‚â§ 1) -/: norm (f x) ‚â§ norm x :=
contraction_of_is_pm_wrt (seminormed_ring.to_is_seminorm /- h1Œ± -/) (seminormed_ring.to_is_seminorm /- h1Œ≤ -/)
  hŒ≤ hf x

lemma eq_seminorms  {Œ± : Type*} [ring Œ±] {f : Œ± ‚Üí nnreal} (hf : is_seminorm f) (hfpm : is_pow_mult f)
  {g : Œ± ‚Üí nnreal} (hg : is_seminorm g) (hgpm : is_pow_mult g)
  (hfg : ‚àÉ (r : nnreal) (hr : 0 < r), ‚àÄ (a : Œ±), f a ‚â§ r * g a)
  (hgf : ‚àÉ (r : nnreal) (hr : 0 < r), ‚àÄ (a : Œ±), g a ‚â§ r * f a) : f = g :=
begin
  obtain ‚ü®r, hr0, hr‚ü© := hfg,
  obtain ‚ü®s, hs0, hs‚ü© := hgf,
  have hle : ring_hom.is_bounded_wrt hf hg (ring_hom.id _) := ‚ü®s, hs0, hs‚ü©,
  have hge : ring_hom.is_bounded_wrt hg hf (ring_hom.id _) := ‚ü®r, hr0, hr‚ü©,
  ext x,
  exact le_antisymm (contraction_of_is_pm_wrt hg hf hfpm hge x)
    (contraction_of_is_pm_wrt hf hg hgpm hle x),
end

--#lint